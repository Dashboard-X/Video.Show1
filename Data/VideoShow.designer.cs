//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VideoShow.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\PROJECTS\\VERTIGO\\VideoShow\\SOURCE\\V1.0\\WEB\\APP_DATA\\VideoShow.MDF")]
	public partial class VideoShowDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void InsertVideosToTag(VideosToTag instance);
    partial void UpdateVideosToTag(VideosToTag instance);
    partial void DeleteVideosToTag(VideosToTag instance);
    partial void InsertVideoStatus(VideoStatus instance);
    partial void UpdateVideoStatus(VideoStatus instance);
    partial void DeleteVideoStatus(VideoStatus instance);
    partial void InsertFavorite(Favorite instance);
    partial void UpdateFavorite(Favorite instance);
    partial void DeleteFavorite(Favorite instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertVideo(Video instance);
    partial void UpdateVideo(Video instance);
    partial void DeleteVideo(Video instance);
    partial void InsertView(View instance);
    partial void UpdateView(View instance);
    partial void DeleteView(View instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertUsersToAvatar(UsersToAvatar instance);
    partial void UpdateUsersToAvatar(UsersToAvatar instance);
    partial void DeleteUsersToAvatar(UsersToAvatar instance);
    partial void InsertAvatar(Avatar instance);
    partial void UpdateAvatar(Avatar instance);
    partial void DeleteAvatar(Avatar instance);
    #endregion
		
		static VideoShowDataContext()
		{
		}
		
		public VideoShowDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoShowDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoShowDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VideoShowDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<VideosToTag> VideosToTags
		{
			get
			{
				return this.GetTable<VideosToTag>();
			}
		}
		
		public System.Data.Linq.Table<VideoStatus> VideoStatus
		{
			get
			{
				return this.GetTable<VideoStatus>();
			}
		}
		
		public System.Data.Linq.Table<Favorite> Favorites
		{
			get
			{
				return this.GetTable<Favorite>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Video> Videos
		{
			get
			{
				return this.GetTable<Video>();
			}
		}
		
		public System.Data.Linq.Table<View> Views
		{
			get
			{
				return this.GetTable<View>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<UsersToAvatar> UsersToAvatars
		{
			get
			{
				return this.GetTable<UsersToAvatar>();
			}
		}
		
		public System.Data.Linq.Table<Avatar> Avatars
		{
			get
			{
				return this.GetTable<Avatar>();
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			OnCreated();
			this._aspnet_User = default(EntityRef<aspnet_User>);
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[Column(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VideosToTags")]
	public partial class VideosToTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VideoToTagId;
		
		private int _VideoId;
		
		private int _TagId;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<Video> _Video;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnVideoToTagIdChanging(int value);
    partial void OnVideoToTagIdChanged();
    partial void OnVideoIdChanging(int value);
    partial void OnVideoIdChanged();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    #endregion
		
		public VideosToTag()
		{
			OnCreated();
			this._Tag = default(EntityRef<Tag>);
			this._Video = default(EntityRef<Video>);
		}
		
		[Column(Storage="_VideoToTagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VideoToTagId
		{
			get
			{
				return this._VideoToTagId;
			}
			set
			{
				if ((this._VideoToTagId != value))
				{
					this.OnVideoToTagIdChanging(value);
					this.SendPropertyChanging();
					this._VideoToTagId = value;
					this.SendPropertyChanged("VideoToTagId");
					this.OnVideoToTagIdChanged();
				}
			}
		}
		
		[Column(Storage="_VideoId", DbType="Int NOT NULL")]
		public int VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					if (this._Video.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[Column(Storage="_TagId", DbType="Int NOT NULL")]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Association(Name="Tag_VideosToTag", Storage="_Tag", ThisKey="TagId", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.VideosToTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.VideosToTags.Add(this);
						this._TagId = value.TagId;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[Association(Name="Video_VideosToTag", Storage="_Video", ThisKey="VideoId", IsForeignKey=true)]
		public Video Video
		{
			get
			{
				return this._Video.Entity;
			}
			set
			{
				Video previousValue = this._Video.Entity;
				if (((previousValue != value) 
							|| (this._Video.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Video.Entity = null;
						previousValue.VideosToTags.Remove(this);
					}
					this._Video.Entity = value;
					if ((value != null))
					{
						value.VideosToTags.Add(this);
						this._VideoId = value.VideoId;
					}
					else
					{
						this._VideoId = default(int);
					}
					this.SendPropertyChanged("Video");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VideoStatus")]
	public partial class VideoStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusId;
		
		private string _Status;
		
		private int _StatusOrder;
		
		private EntitySet<Video> _Videos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnStatusOrderChanging(int value);
    partial void OnStatusOrderChanged();
    #endregion
		
		public VideoStatus()
		{
			OnCreated();
			this._Videos = new EntitySet<Video>(new Action<Video>(this.attach_Videos), new Action<Video>(this.detach_Videos));
		}
		
		[Column(Storage="_StatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_StatusOrder", DbType="Int NOT NULL")]
		public int StatusOrder
		{
			get
			{
				return this._StatusOrder;
			}
			set
			{
				if ((this._StatusOrder != value))
				{
					this.OnStatusOrderChanging(value);
					this.SendPropertyChanging();
					this._StatusOrder = value;
					this.SendPropertyChanged("StatusOrder");
					this.OnStatusOrderChanged();
				}
			}
		}
		
		[Association(Name="VideoStatus_Video", Storage="_Videos", OtherKey="StatusId")]
		public EntitySet<Video> Videos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.VideoStatus = this;
			this.SendPropertyChanged("Videos");
		}
		
		private void detach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.VideoStatus = null;
			this.SendPropertyChanged("Videos");
		}
	}
	
	[Table(Name="dbo.Favorites")]
	public partial class Favorite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FavoriteId;
		
		private System.Guid _UserId;
		
		private int _VideoId;
		
		private EntityRef<Video> _Video;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnFavoriteIdChanging(int value);
    partial void OnFavoriteIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnVideoIdChanging(int value);
    partial void OnVideoIdChanged();
    #endregion
		
		public Favorite()
		{
			OnCreated();
			this._Video = default(EntityRef<Video>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
		}
		
		[Column(Storage="_FavoriteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FavoriteId
		{
			get
			{
				return this._FavoriteId;
			}
			set
			{
				if ((this._FavoriteId != value))
				{
					this.OnFavoriteIdChanging(value);
					this.SendPropertyChanging();
					this._FavoriteId = value;
					this.SendPropertyChanged("FavoriteId");
					this.OnFavoriteIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_VideoId", DbType="Int NOT NULL")]
		public int VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					if (this._Video.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[Association(Name="Video_Favorite", Storage="_Video", ThisKey="VideoId", IsForeignKey=true)]
		public Video Video
		{
			get
			{
				return this._Video.Entity;
			}
			set
			{
				Video previousValue = this._Video.Entity;
				if (((previousValue != value) 
							|| (this._Video.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Video.Entity = null;
						previousValue.Favorites.Remove(this);
					}
					this._Video.Entity = value;
					if ((value != null))
					{
						value.Favorites.Add(this);
						this._VideoId = value.VideoId;
					}
					else
					{
						this._VideoId = default(int);
					}
					this.SendPropertyChanged("Video");
				}
			}
		}
		
		[Association(Name="aspnet_User_Favorite", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Favorites.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Favorites.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagId;
		
		private string _Tag1;
		
		private EntitySet<VideosToTag> _VideosToTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnTag1Changing(string value);
    partial void OnTag1Changed();
    #endregion
		
		public Tag()
		{
			OnCreated();
			this._VideosToTags = new EntitySet<VideosToTag>(new Action<VideosToTag>(this.attach_VideosToTags), new Action<VideosToTag>(this.detach_VideosToTags));
		}
		
		[Column(Storage="_TagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[Column(Name="Tag", Storage="_Tag1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Tag1
		{
			get
			{
				return this._Tag1;
			}
			set
			{
				if ((this._Tag1 != value))
				{
					this.OnTag1Changing(value);
					this.SendPropertyChanging();
					this._Tag1 = value;
					this.SendPropertyChanged("Tag1");
					this.OnTag1Changed();
				}
			}
		}
		
		[Association(Name="Tag_VideosToTag", Storage="_VideosToTags", OtherKey="TagId")]
		public EntitySet<VideosToTag> VideosToTags
		{
			get
			{
				return this._VideosToTags;
			}
			set
			{
				this._VideosToTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VideosToTags(VideosToTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
			this.SendPropertyChanged("VideosToTags");
		}
		
		private void detach_VideosToTags(VideosToTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
			this.SendPropertyChanged("VideosToTags");
		}
	}
	
	[Table(Name="dbo.Videos")]
	public partial class Video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VideoId;
		
		private System.Guid _OwnerUserId;
		
		private string _Title;
		
		private string _Description;
		
		private string _VideoUrl;
		
		private string _ThumbnailUrl;
		
		private System.DateTime _DatePublished;
		
		private int _SizeInKilobytes;
		
		private int _DurationInSeconds;
		
		private int _StatusId;
		
		private string _PreviewUrl;
		
		private EntitySet<VideosToTag> _VideosToTags;
		
		private EntitySet<Favorite> _Favorites;
		
		private EntitySet<View> _Views;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<VideoStatus> _VideoStatus;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnVideoIdChanging(int value);
    partial void OnVideoIdChanged();
    partial void OnOwnerUserIdChanging(System.Guid value);
    partial void OnOwnerUserIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVideoUrlChanging(string value);
    partial void OnVideoUrlChanged();
    partial void OnThumbnailUrlChanging(string value);
    partial void OnThumbnailUrlChanged();
    partial void OnDatePublishedChanging(System.DateTime value);
    partial void OnDatePublishedChanged();
    partial void OnSizeInKilobytesChanging(int value);
    partial void OnSizeInKilobytesChanged();
    partial void OnDurationInSecondsChanging(int value);
    partial void OnDurationInSecondsChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnPreviewUrlChanging(string value);
    partial void OnPreviewUrlChanged();
    #endregion
		
		public Video()
		{
			OnCreated();
			this._VideosToTags = new EntitySet<VideosToTag>(new Action<VideosToTag>(this.attach_VideosToTags), new Action<VideosToTag>(this.detach_VideosToTags));
			this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
			this._Views = new EntitySet<View>(new Action<View>(this.attach_Views), new Action<View>(this.detach_Views));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._VideoStatus = default(EntityRef<VideoStatus>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
		}
		
		[Column(Storage="_VideoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_VideoUrl", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string VideoUrl
		{
			get
			{
				return this._VideoUrl;
			}
			set
			{
				if ((this._VideoUrl != value))
				{
					this.OnVideoUrlChanging(value);
					this.SendPropertyChanging();
					this._VideoUrl = value;
					this.SendPropertyChanged("VideoUrl");
					this.OnVideoUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ThumbnailUrl", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ThumbnailUrl
		{
			get
			{
				return this._ThumbnailUrl;
			}
			set
			{
				if ((this._ThumbnailUrl != value))
				{
					this.OnThumbnailUrlChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailUrl = value;
					this.SendPropertyChanged("ThumbnailUrl");
					this.OnThumbnailUrlChanged();
				}
			}
		}
		
		[Column(Storage="_DatePublished", DbType="DateTime NOT NULL")]
		public System.DateTime DatePublished
		{
			get
			{
				return this._DatePublished;
			}
			set
			{
				if ((this._DatePublished != value))
				{
					this.OnDatePublishedChanging(value);
					this.SendPropertyChanging();
					this._DatePublished = value;
					this.SendPropertyChanged("DatePublished");
					this.OnDatePublishedChanged();
				}
			}
		}
		
		[Column(Storage="_SizeInKilobytes", DbType="Int NOT NULL")]
		public int SizeInKilobytes
		{
			get
			{
				return this._SizeInKilobytes;
			}
			set
			{
				if ((this._SizeInKilobytes != value))
				{
					this.OnSizeInKilobytesChanging(value);
					this.SendPropertyChanging();
					this._SizeInKilobytes = value;
					this.SendPropertyChanged("SizeInKilobytes");
					this.OnSizeInKilobytesChanged();
				}
			}
		}
		
		[Column(Storage="_DurationInSeconds", DbType="Int NOT NULL")]
		public int DurationInSeconds
		{
			get
			{
				return this._DurationInSeconds;
			}
			set
			{
				if ((this._DurationInSeconds != value))
				{
					this.OnDurationInSecondsChanging(value);
					this.SendPropertyChanging();
					this._DurationInSeconds = value;
					this.SendPropertyChanged("DurationInSeconds");
					this.OnDurationInSecondsChanged();
				}
			}
		}
		
		[Column(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._VideoStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_PreviewUrl", DbType="NVarChar(100)")]
		public string PreviewUrl
		{
			get
			{
				return this._PreviewUrl;
			}
			set
			{
				if ((this._PreviewUrl != value))
				{
					this.OnPreviewUrlChanging(value);
					this.SendPropertyChanging();
					this._PreviewUrl = value;
					this.SendPropertyChanged("PreviewUrl");
					this.OnPreviewUrlChanged();
				}
			}
		}
		
		[Association(Name="Video_VideosToTag", Storage="_VideosToTags", OtherKey="VideoId")]
		public EntitySet<VideosToTag> VideosToTags
		{
			get
			{
				return this._VideosToTags;
			}
			set
			{
				this._VideosToTags.Assign(value);
			}
		}
		
		[Association(Name="Video_Favorite", Storage="_Favorites", OtherKey="VideoId")]
		public EntitySet<Favorite> Favorites
		{
			get
			{
				return this._Favorites;
			}
			set
			{
				this._Favorites.Assign(value);
			}
		}
		
		[Association(Name="Video_View", Storage="_Views", OtherKey="VideoId")]
		public EntitySet<View> Views
		{
			get
			{
				return this._Views;
			}
			set
			{
				this._Views.Assign(value);
			}
		}
		
		[Association(Name="Video_Comment", Storage="_Comments", OtherKey="VideoId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="VideoStatus_Video", Storage="_VideoStatus", ThisKey="StatusId", IsForeignKey=true)]
		public VideoStatus VideoStatus
		{
			get
			{
				return this._VideoStatus.Entity;
			}
			set
			{
				VideoStatus previousValue = this._VideoStatus.Entity;
				if (((previousValue != value) 
							|| (this._VideoStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VideoStatus.Entity = null;
						previousValue.Videos.Remove(this);
					}
					this._VideoStatus.Entity = value;
					if ((value != null))
					{
						value.Videos.Add(this);
						this._StatusId = value.StatusId;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("VideoStatus");
				}
			}
		}
		
		[Association(Name="aspnet_User_Video", Storage="_aspnet_User", ThisKey="OwnerUserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Videos.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Videos.Add(this);
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerUserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VideosToTags(VideosToTag entity)
		{
			this.SendPropertyChanging();
			entity.Video = this;
			this.SendPropertyChanged("VideosToTags");
		}
		
		private void detach_VideosToTags(VideosToTag entity)
		{
			this.SendPropertyChanging();
			entity.Video = null;
			this.SendPropertyChanged("VideosToTags");
		}
		
		private void attach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.Video = this;
			this.SendPropertyChanged("Favorites");
		}
		
		private void detach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.Video = null;
			this.SendPropertyChanged("Favorites");
		}
		
		private void attach_Views(View entity)
		{
			this.SendPropertyChanging();
			entity.Video = this;
			this.SendPropertyChanged("Views");
		}
		
		private void detach_Views(View entity)
		{
			this.SendPropertyChanging();
			entity.Video = null;
			this.SendPropertyChanged("Views");
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Video = this;
			this.SendPropertyChanged("Comments");
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Video = null;
			this.SendPropertyChanged("Comments");
		}
	}
	
	[Table(Name="dbo.Views")]
	public partial class View : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ViewId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private int _VideoId;
		
		private System.DateTime _DateViewed;
		
		private EntityRef<Video> _Video;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnViewIdChanging(int value);
    partial void OnViewIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnVideoIdChanging(int value);
    partial void OnVideoIdChanged();
    partial void OnDateViewedChanging(System.DateTime value);
    partial void OnDateViewedChanged();
    #endregion
		
		public View()
		{
			OnCreated();
			this._Video = default(EntityRef<Video>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
		}
		
		[Column(Storage="_ViewId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ViewId
		{
			get
			{
				return this._ViewId;
			}
			set
			{
				if ((this._ViewId != value))
				{
					this.OnViewIdChanging(value);
					this.SendPropertyChanging();
					this._ViewId = value;
					this.SendPropertyChanged("ViewId");
					this.OnViewIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_VideoId", DbType="Int NOT NULL")]
		public int VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					if (this._Video.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateViewed", DbType="DateTime NOT NULL")]
		public System.DateTime DateViewed
		{
			get
			{
				return this._DateViewed;
			}
			set
			{
				if ((this._DateViewed != value))
				{
					this.OnDateViewedChanging(value);
					this.SendPropertyChanging();
					this._DateViewed = value;
					this.SendPropertyChanged("DateViewed");
					this.OnDateViewedChanged();
				}
			}
		}
		
		[Association(Name="Video_View", Storage="_Video", ThisKey="VideoId", IsForeignKey=true)]
		public Video Video
		{
			get
			{
				return this._Video.Entity;
			}
			set
			{
				Video previousValue = this._Video.Entity;
				if (((previousValue != value) 
							|| (this._Video.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Video.Entity = null;
						previousValue.Views.Remove(this);
					}
					this._Video.Entity = value;
					if ((value != null))
					{
						value.Views.Add(this);
						this._VideoId = value.VideoId;
					}
					else
					{
						this._VideoId = default(int);
					}
					this.SendPropertyChanged("Video");
				}
			}
		}
		
		[Association(Name="aspnet_User_View", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Views.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Views.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private System.Guid _UserId;
		
		private int _VideoId;
		
		private string _Comment1;
		
		private System.DateTime _DateCreated;
		
		private double _VideoTimeInSeconds;
		
		private EntityRef<Video> _Video;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnVideoIdChanging(int value);
    partial void OnVideoIdChanged();
    partial void OnComment1Changing(string value);
    partial void OnComment1Changed();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnVideoTimeInSecondsChanging(double value);
    partial void OnVideoTimeInSecondsChanged();
    #endregion
		
		public Comment()
		{
			OnCreated();
			this._Video = default(EntityRef<Video>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
		}
		
		[Column(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_VideoId", DbType="Int NOT NULL")]
		public int VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					if (this._Video.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[Column(Name="Comment", Storage="_Comment1", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Comment1
		{
			get
			{
				return this._Comment1;
			}
			set
			{
				if ((this._Comment1 != value))
				{
					this.OnComment1Changing(value);
					this.SendPropertyChanging();
					this._Comment1 = value;
					this.SendPropertyChanged("Comment1");
					this.OnComment1Changed();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_VideoTimeInSeconds", DbType="Float NOT NULL")]
		public double VideoTimeInSeconds
		{
			get
			{
				return this._VideoTimeInSeconds;
			}
			set
			{
				if ((this._VideoTimeInSeconds != value))
				{
					this.OnVideoTimeInSecondsChanging(value);
					this.SendPropertyChanging();
					this._VideoTimeInSeconds = value;
					this.SendPropertyChanged("VideoTimeInSeconds");
					this.OnVideoTimeInSecondsChanged();
				}
			}
		}
		
		[Association(Name="Video_Comment", Storage="_Video", ThisKey="VideoId", IsForeignKey=true)]
		public Video Video
		{
			get
			{
				return this._Video.Entity;
			}
			set
			{
				Video previousValue = this._Video.Entity;
				if (((previousValue != value) 
							|| (this._Video.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Video.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Video.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._VideoId = value.VideoId;
					}
					else
					{
						this._VideoId = default(int);
					}
					this.SendPropertyChanged("Video");
				}
			}
		}
		
		[Association(Name="aspnet_User_Comment", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private EntitySet<Favorite> _Favorites;
		
		private EntitySet<Video> _Videos;
		
		private EntitySet<View> _Views;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<UsersToAvatar> _UsersToAvatars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			OnCreated();
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
			this._Videos = new EntitySet<Video>(new Action<Video>(this.attach_Videos), new Action<Video>(this.detach_Videos));
			this._Views = new EntitySet<View>(new Action<View>(this.attach_Views), new Action<View>(this.detach_Views));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._UsersToAvatars = new EntitySet<UsersToAvatar>(new Action<UsersToAvatar>(this.attach_UsersToAvatars), new Action<UsersToAvatar>(this.detach_UsersToAvatars));
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		[Association(Name="aspnet_User_Favorite", Storage="_Favorites", OtherKey="UserId")]
		public EntitySet<Favorite> Favorites
		{
			get
			{
				return this._Favorites;
			}
			set
			{
				this._Favorites.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_Video", Storage="_Videos", OtherKey="OwnerUserId")]
		public EntitySet<Video> Videos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_View", Storage="_Views", OtherKey="UserId")]
		public EntitySet<View> Views
		{
			get
			{
				return this._Views;
			}
			set
			{
				this._Views.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_Comment", Storage="_Comments", OtherKey="UserId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_UsersToAvatar", Storage="_UsersToAvatars", OtherKey="UserId")]
		public EntitySet<UsersToAvatar> UsersToAvatars
		{
			get
			{
				return this._UsersToAvatars;
			}
			set
			{
				this._UsersToAvatars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
			this.SendPropertyChanged("Favorites");
		}
		
		private void detach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
			this.SendPropertyChanged("Favorites");
		}
		
		private void attach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
			this.SendPropertyChanged("Videos");
		}
		
		private void detach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
			this.SendPropertyChanged("Videos");
		}
		
		private void attach_Views(View entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
			this.SendPropertyChanged("Views");
		}
		
		private void detach_Views(View entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
			this.SendPropertyChanged("Views");
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
			this.SendPropertyChanged("Comments");
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
			this.SendPropertyChanged("Comments");
		}
		
		private void attach_UsersToAvatars(UsersToAvatar entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
			this.SendPropertyChanged("UsersToAvatars");
		}
		
		private void detach_UsersToAvatars(UsersToAvatar entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
			this.SendPropertyChanged("UsersToAvatars");
		}
	}
	
	[Table(Name="dbo.UsersToAvatars")]
	public partial class UsersToAvatar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserToAvatarId;
		
		private int _AvatarId;
		
		private System.Guid _UserId;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Avatar> _Avatar;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnUserToAvatarIdChanging(int value);
    partial void OnUserToAvatarIdChanged();
    partial void OnAvatarIdChanging(int value);
    partial void OnAvatarIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    #endregion
		
		public UsersToAvatar()
		{
			OnCreated();
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Avatar = default(EntityRef<Avatar>);
		}
		
		[Column(Storage="_UserToAvatarId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserToAvatarId
		{
			get
			{
				return this._UserToAvatarId;
			}
			set
			{
				if ((this._UserToAvatarId != value))
				{
					this.OnUserToAvatarIdChanging(value);
					this.SendPropertyChanging();
					this._UserToAvatarId = value;
					this.SendPropertyChanged("UserToAvatarId");
					this.OnUserToAvatarIdChanged();
				}
			}
		}
		
		[Column(Storage="_AvatarId", DbType="Int NOT NULL")]
		public int AvatarId
		{
			get
			{
				return this._AvatarId;
			}
			set
			{
				if ((this._AvatarId != value))
				{
					if (this._Avatar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAvatarIdChanging(value);
					this.SendPropertyChanging();
					this._AvatarId = value;
					this.SendPropertyChanged("AvatarId");
					this.OnAvatarIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_UsersToAvatar", Storage="_aspnet_User", ThisKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UsersToAvatars.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UsersToAvatars.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[Association(Name="Avatar_UsersToAvatar", Storage="_Avatar", ThisKey="AvatarId", IsForeignKey=true)]
		public Avatar Avatar
		{
			get
			{
				return this._Avatar.Entity;
			}
			set
			{
				Avatar previousValue = this._Avatar.Entity;
				if (((previousValue != value) 
							|| (this._Avatar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Avatar.Entity = null;
						previousValue.UsersToAvatars.Remove(this);
					}
					this._Avatar.Entity = value;
					if ((value != null))
					{
						value.UsersToAvatars.Add(this);
						this._AvatarId = value.AvatarId;
					}
					else
					{
						this._AvatarId = default(int);
					}
					this.SendPropertyChanged("Avatar");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Avatars")]
	public partial class Avatar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AvatarId;
		
		private string _ImageUrl;
		
		private EntitySet<UsersToAvatar> _UsersToAvatars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnAvatarIdChanging(int value);
    partial void OnAvatarIdChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    #endregion
		
		public Avatar()
		{
			OnCreated();
			this._UsersToAvatars = new EntitySet<UsersToAvatar>(new Action<UsersToAvatar>(this.attach_UsersToAvatars), new Action<UsersToAvatar>(this.detach_UsersToAvatars));
		}
		
		[Column(Storage="_AvatarId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AvatarId
		{
			get
			{
				return this._AvatarId;
			}
			set
			{
				if ((this._AvatarId != value))
				{
					this.OnAvatarIdChanging(value);
					this.SendPropertyChanging();
					this._AvatarId = value;
					this.SendPropertyChanged("AvatarId");
					this.OnAvatarIdChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Association(Name="Avatar_UsersToAvatar", Storage="_UsersToAvatars", OtherKey="AvatarId")]
		public EntitySet<UsersToAvatar> UsersToAvatars
		{
			get
			{
				return this._UsersToAvatars;
			}
			set
			{
				this._UsersToAvatars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersToAvatars(UsersToAvatar entity)
		{
			this.SendPropertyChanging();
			entity.Avatar = this;
			this.SendPropertyChanged("UsersToAvatars");
		}
		
		private void detach_UsersToAvatars(UsersToAvatar entity)
		{
			this.SendPropertyChanging();
			entity.Avatar = null;
			this.SendPropertyChanged("UsersToAvatars");
		}
	}
}
